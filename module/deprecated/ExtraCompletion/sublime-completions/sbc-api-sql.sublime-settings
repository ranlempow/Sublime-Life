{
  "scope": "source.sql",

  "completions":
  [
	// Source, converted from:
	// https://github.com/jobywalker/PgSQL-Sublime/blob/master/Completions/PgSQL.sublime-completions

	// all pg_* are lowercase, else uppercase

	// Generic
	[ "ABORT\tGeneric"		, "ABORT "],
	[ "ALL\tGeneric"		, "ALL "],
	[ "AND\tGeneric"		, "AND "],
	[ "ANY\tGeneric"		, "ANY "],
	[ "ARRAY\tGeneric"		, "ARRAY "],
	[ "AS\tGeneric"			, "AS "],
	[ "BEGIN\tGeneric"		, "BEGIN "],
	[ "COMMIT\tGeneric"		, "COMMIT "],
	[ "DELETE\tGeneric"		, "DELETE "],
	[ "DISTINCT\tGeneric"	, "DISTINCT "],
	[ "DOCUMENT\tGeneric"	, "DOCUMENT "],
	[ "EXISTS\tGeneric"		, "EXISTS "],
	[ "FALSE\tGeneric"		, "FALSE"],
	[ "FROM\tGeneric"		, "FROM "],
	[ "IN\tGeneric"			, "IN "],
	[ "IS\tGeneric"			, "IS "],
	[ "LIKE\tGeneric"		, "LIKE "],
	[ "NOT\tGeneric"		, "NOT "],
	[ "NULL\tGeneric"		, "NULL "],
	[ "OR\tGeneric"			, "OR "],
	[ "RECORD\tGeneric"		, "RECORD "],
	[ "ROW\tGeneric"		, "ROW "],
	[ "SELECT\tGeneric"		, "SELECT "],
	[ "SIMILAR to\tGeneric"	, "SIMILAR TO "],
	[ "SOME\tGeneric"		, "SOME "],
	[ "THEN\tGeneric"		, "THEN "],
	[ "TRUE\tGeneric"		, "TRUE"],
	[ "UNKNOWN\tGeneric"	, "UNKNOWN "],
	[ "UPDATE\tGeneric"		, "UPDATE "],
	[ "WHERE\tGeneric"		, "WHERE "],
	[ "abort\tGeneric"		, "ABORT "],
	[ "all\tGeneric"		, "ALL "],
	[ "and\tGeneric"		, "AND "],
	[ "any\tGeneric"		, "ANY "],
	[ "array\tGeneric"		, "ARRAY "],
	[ "as\tGeneric"			, "AS "],
	[ "begin\tGeneric"		, "BEGIN "],
	[ "commit\tGeneric"		, "COMMIT "],
	[ "delete\tGeneric"		, "DELETE "],
	[ "distinct\tGeneric"	, "DISTINCT "],
	[ "document\tGeneric"	, "DOCUMENT "],
	[ "exists\tGeneric"		, "EXISTS "],
	[ "false\tGeneric"		, "FALSE"],
	[ "from\tGeneric"		, "FROM "],
	[ "in\tGeneric"			, "IN "],
	[ "is\tGeneric"			, "IS "],
	[ "like\tGeneric"		, "LIKE "],
	[ "not\tGeneric"		, "NOT "],
	[ "null\tGeneric"		, "NULL "],
	[ "or\tGeneric"			, "OR "],
	[ "record\tGeneric"		, "RECORD "],
	[ "row\tGeneric"		, "ROW "],
	[ "select\tGeneric"		, "SELECT "],
	[ "similar to\tGeneric"	, "SIMILAR TO "],
	[ "some\tGeneric"		, "SOME "],
	[ "then\tGeneric"		, "THEN "],
	[ "true\tGeneric"		, "TRUE"],
	[ "unknown\tGeneric"	, "UNKNOWN "],
	[ "update\tGeneric"		, "UPDATE "],
	[ "where\tGeneric"		, "WHERE "],


	// Partials
	[ "SELECT * FROM schema.table AS t\tPartials"				, "SELECT ${1:*} FROM ${2:schema}.${3:table} AS ${4:t}" ],
	[ "WITH t AS (...)\tPartials"								, "WITH ${1:t} AS ($2)" ],
	
	[ "JOIN schema.table AS t ON (a.id=t.id)\tPartials"			, "JOIN ${1:schema}.${2:table} AS ${3:t} ON (${4:a.id} = ${3:t}.${5:id}) " ],
	[ "LEFT JOIN schema.table AS t ON (a.id=t.id)\tPartials"	, "LEFT JOIN ${1:schema}.${2:table} AS ${3:t} ON (${4:a.id} = ${3:t}.${5:id}) " ],
	[ "RIGHT JOIN schema.table AS t ON (a.id=t.id)\tPartials"	, "RIGHT JOIN ${1:schema}.${2:table} AS ${3:t} ON (${4:a.id} = ${3:t}.${5:id}) " ],
	[ "FULL JOIN schema.table AS t ON (a.id=t.id)\tPartials"	, "FULL JOIN ${1:schema}.${2:table} AS ${3:t} ON (${4:a.id} = ${3:t}.${5:id}) " ],
	[ "CROSS JOIN schema.table AS t\tPartials"					, "CROSS JOIN ${1:schema}.${2:table} AS ${3:t} " ],
	
	// Conditional Expressions
	[ "COALESCE(value, ...)\tCondit. Expr."						, "COALESCE(${1:value}, ${2:value})" ],
	[ "NULLIF(value1, value2)\tCondit. Expr."					, "NULLIF(${1:value1}, ${2:value2})" ],
	[ "GREATEST(value, ...)\tCondit. Expr."						, "GREATEST(${1:value}, ${2:value})" ],
	[ "LEAST(value, ...)\tCondit. Expr."						, "LEAST(${1:value}, ${2:value})" ],
	
	// Mathematical Functions
	[ "ABS(x)\tMathematical"									, "ABS(${1:anynumeric})" ],
	[ "CBRT(x)\tMathematical"									, "CBTR(${1:double})" ],
	[ "CEIL(x)\tMathematical"									, "CEIL(${1:numeric})" ],
	[ "CEILING(x)\tMathematical"								, "CEILING(${1:numeric})" ],
	[ "DEGREES(x)\tMathematical"								, "DEGREES(${1:double})" ],
	[ "DIV(num, den)\tMathematical"								, "DIV(${1:numerator}, ${2:denominator})" ],
	[ "EXP(x)\tMathematical"									, "EXP(${1:numeric})" ],
	[ "FLOOR(x)\tMathematical"									, "FLOOR(${1:numeric})" ],
	[ "LN(x)\tMathematical"										, "LN(${1:numeric})" ],
	[ "LOG(x)\tMathematical"									, "LOG(${1:numeric})" ],
	[ "LOG(base, x)\tMathematical"								, "LOG(${1:base}, ${2:numeric})" ],
	[ "MOD(num, den)\tMathematical"								, "MOD(${1:numerator}, ${2:denominator})" ],
	[ "PI()\tMathematical"										, "PI()" ],
	[ "POWER(x, exp)\tMathematical"								, "POWER(${1:numeric}, ${2:exponent})" ],
	[ "RADIANS(x)\tMathematical"								, "RADIANS(${1:degrees})" ],
	[ "RANDOM()\tMathematical"									, "RANDOM()" ],
	[ "ROUND(x)\tMathematical"									, "ROUND(${1:numeric})" ],
	[ "ROUND(x, places)\tMathematical"							, "ROUND(${1:numeric}, ${2:places})" ],
	[ "SETSEED(x)\tMathematical"								, "SETSEED(${1:double})" ],
	[ "SIGN(x)\tMathematical"									, "SIGN(${1:numeric})" ],
	[ "SQRT(x)\tMathematical"									, "SQRT(${1:numeric})" ],
	[ "TRUNC(x)\tMathematical"									, "TRUNC(${1:numeric})" ],
	[ "TRUNC(x, places)\tMathematical"							, "TRUNC(${1:numeric}, ${2:places})" ],
	[ "WIDTH_BUCKET(op, b1, b2, count)\tMathematical"			, "WIDTH_BUCKET(${1:operand}, ${2:b1}, ${3:b2}, ${4:count})" ],
	
	// Trigonometric Functions
	[ "ACOS(x)\tTrigonometric"									, "ACOS(${1:double})" ],
	[ "ASIN(x)\tTrigonometric"									, "ASIN(${1:double})" ],
	[ "ATAN(x)\tTrigonometric"									, "ATAN(${1:double})" ],
	[ "ATAN2(y, x)\tTrigonometric"								, "ATAN2(${1:double}, ${2:double})" ],
	[ "COS(x)\tTrigonometric"									, "COS(${1:radians})" ],
	[ "COT(x)\tTrigonometric"									, "COT(${1:radians})" ],
	[ "SIN(x)\tTrigonometric"									, "SIN(${1:radians})" ],
	[ "TAN(x)\tTrigonometric"									, "TAN(${1:radians})" ],
	
	// String Functions
	[ "BIT_LENGTH(string)\tString"								, "BIT_LENGTH(${1:string})" ],
	[ "CHAR_LENGTH(string)\tString"								, "CHAR_LENGTH(${1:string})" ],
	[ "CHARACTER_LENGTH(string)\tString"						, "CHARACTER_LENGTH(${1:string})" ],
	[ "LOWER(string)\tString"									, "LOWER(${1:string})" ],
	[ "OCTET_LENGTH(string)\tString"							, "OCTET_LENGTH(${1:string})" ],
	[ "OVERLAY(from start)\tString"								, "OVERLAY(${1:string} placing ${2:string}) from ${3:start}" ],
	[ "OVERLAY(from start for len)\tString"						, "OVERLAY(${1:string} placing ${2:string}) from ${3:start} for ${4:length}" ],
	[ "POSITION(needle, haystack)\tString"						, "POSITION(${1:needle} in ${2:haystack})" ],
	[ "SUBSTRING(string from start)\tString"					, "SUBSTRING(${1:string} from ${2:start})" ],
	[ "SUBSTRING(string from start for len)\tString"			, "SUBSTRING(${1:string} from ${2:start} for ${3:length})" ],
	[ "SUBSTRING(string from pattern)\tString"					, "SUBSTRING(${1:string} from ${2:pattern})" ],
	[ "SUBSTRING(string from pattern for escape)\tString"		, "SUBSTRING(${1:string} from ${2:pattern} for ${3:escape})" ],
	[ "TRIM(from string)\tString"								, "TRIM(from ${1:string})" ],
	[ "TRIM(lead|trail|both from string)\tString"				, "TRIM(${1:leading|trailing|both} from ${2:string})" ],
	[ "TRIM(chars from string)\tString"							, "TRIM(${1:leading|trailing|both} from ${2:string})" ],
	[ "TRIM(lead|trail|both chars from string)\tString"			, "TRIM(${1:leading|trailing|both} ${2:characters} from ${3:string})" ],
	[ "UPPER(string)\tString"									, "UPPER(${1:string})" ],
	
	// Other String Functions
	[ "ASCII(string)\tString"									, "ASCII(${1:string})" ],
	[ "AT TIME ZONE\tString"									, "AT TIME ZONE" ],
	[ "BTRIM(string)\tString"									, "BTRIM(${1:string})" ],
	[ "BTRIM(string, chars)\tString"							, "BTRIM(${1:string}, ${2:characters})" ],
	[ "CHR(code)\tString"										, "CHR(${1:code})" ],
	[ "CONCAT(string, ...)\tString"								, "CONCAT(${1:string}, ${2:string})" ],
	[ "CONVERT(string, from, to)\tString"						, "CONVERT(${1:string}, ${2:encoding-from}, ${3:encoding-to})" ],
	[ "CONVERT_FROM(string, from)\tString"						, "CONVERT_FROM(${1:string}, ${2:encoding-from})" ],
	[ "CONVERT_TO(string, to)\tString"							, "CONVERT_TO(${1:string}, ${2:encoding-to})" ],
	[ "DECODE(string, format)\tString"							, "DECODE(${1:string}, ${2:format})" ],
	[ "ENCODE(string, format)\tString"							, "ENCODE(${1:string}, ${2:format})" ],
	[ "FORMAT(format, ...)\tString"								, "FORMAT(${1:formatstring}, ${2:any})" ],
	[ "INITCAP(string)\tString"									, "INITCAP(${1:string})" ],
	[ "LEFT(string, len)\tString"								, "LEFT(${1:string}, ${2:length})" ],
	[ "LENGTH(string)\tString"									, "LENGTH(${1:string})" ],
	[ "LENGTH(string, encoding)\tString"						, "LENGTH(${1:string}, ${2:encoding})" ],
	[ "LPAD(string, len)\tString"								, "LPAD(${1:string}, ${2:length})" ],
	[ "LPAD(string, len, fill)\tString"							, "LPAD(${1:string}, ${2:length}, ${3:fill})" ],
	[ "LTRIM(string)\tString"									, "LTRIM(${1:string})" ],
	[ "LTRIM(string, chars)\tString"							, "LTRIM(${1:string}, ${2:characters})" ],
	[ "MD5(string)\tString"										, "MD5(${1:string})" ],
	[ "pg_client_encoding()\tString"							, "pg_client_encoding()" ],
	[ "QUOTE_IDENT(string)\tString"								, "QUOTE_IDENT(${1:string})" ],
	[ "QUOTE_LITERAL(any)\tString"								, "QUOTE_LITERAL(${1:any})" ],
	[ "QUOTE_NULLABLE(any)\tString"								, "QUOTE_NULLABLE(${1:any})" ],
	[ "REGEXP_MATCHES(string, pattern)\tString"					, "REGEXP_MATCHES(${1:string}, ${2:pattern})" ],
	[ "REGEXP_MATCHES(string, pattern, flags)\tString"			, "REGEXP_MATCHES(${1:string}, ${2:pattern}, ${3:flags})" ],
	[ "REGEXP_REPLACE(string, pattern, replacement)\tString"	, "REGEXP_REPLACE(${1:string}, ${2:pattern}, ${3:replacement})" ],
	[ "REGEXP_REPLACE(string, pattern, replacement, flags)\tString", "REGEXP_REPLACE(${1:string}, ${2:pattern}, ${3:replacement}, ${4:flags})" ],
	[ "REGEXP_SPLIT_TO_ARRAY(string, pattern)\tString"			, "REGEXP_SPLIT_TO_ARRAY(${1:string}, ${2:pattern})" ],
	[ "REGEXP_SPLIT_TO_ARRAY(string, pattern, flags)\tString"	, "REGEXP_SPLIT_TO_ARRAY(${1:string}, ${2:pattern}, ${3:flags})" ],
	[ "REGEXP_SPLIT_TO_TABLE(string, pattern)\tString"			, "REGEXP_SPLIT_TO_TABLE(${1:string}, ${2:pattern})" ],
	[ "REGEXP_SPLIT_TO_TABLE(string, pattern, flags)\tString"	, "REGEXP_SPLIT_TO_TABLE(${1:string}, ${2:pattern}, ${3:flags})" ],
	[ "REPEAT(string, count)\tString"							, "REPEAT(${1:string}, ${2:count})" ],
	[ "REPLACE(string, from, to)\tString"						, "REPLACE(${1:string}, ${2:from}, ${3:to})" ],
	[ "REVERSE(string)\tString"									, "REVERSE(${1:string})" ],
	[ "RIGHT(string, len)\tString"								, "RIGHT(${1:string}, ${2:length})" ],
	[ "RPAD(string, len)\tString"								, "RPAD(${1:string}, ${2:length})" ],
	[ "RPAD(string, len, fill)\tString"							, "RPAD(${1:string}, ${2:length}, ${3:fill})" ],
	[ "RTRIM(string)\tString"									, "RTRIM(${1:string})" ],
	[ "RTRIM(string, chars)\tString"							, "RTRIM(${1:string}, ${2:characters})" ],
	[ "SPLIT_PART(string, delimiter, field)\tString"			, "SPLIT_PART(${1:string}, ${2:delimiter}, ${3:field})" ],
	[ "STRPOS(string, substring)\tString"						, "STRPOS(${1:string}, ${2:substring})" ],
	[ "SUBSTR(string, from)\tString"							, "SUBSTR(${1:string}, ${2:from})" ],
	[ "SUBSTR(string, from, count)\tString"						, "SUBSTR(${1:string}, ${2:from}, ${3:count})" ],
	[ "TO_ASCII(string)\tString"								, "TO_ASCII(${1:string})" ],
	[ "TO_ASCII(string, encoding)\tString"						, "TO_ASCII(${1:string}, ${2:encoding})" ],
	[ "TO_HEX(integer)\tString"									, "TO_HEX(${1:integer})" ],
	[ "TRANSLATE(string, from, to)\tString"						, "TRANSLATE(${1:string}, ${2:from}, ${3:to})" ],
	
	// Other Binary String Functions
	[ "GET_BIT(string, offset)\tBinary"							, "GET_BIT(${1:string}, ${2:offset})" ],
	[ "GET_BYTE(string, offset)\tBinary"						, "GET_BYTE(${1:string}, ${2:offset})" ],
	[ "SET_BIT(string, offset, newvalue)\tBinary"				, "SET_BIT(${1:string}, ${2:offset}, ${3:newvalue})" ],
	[ "SET_BYTE(string, offset, newvalue)\tBinary"				, "SET_BYTE(${1:string}, ${2:offset}, ${3:newvalue})" ],
	
	// Data Type Formatting Functions
	[ "TO_CHAR(value, format)\tDate Type"						, "TO_CHAR(${1:value}, ${2:format})" ],
	[ "TO_DATE(value, format)\tDate Type"						, "TO_DATE(${1:value}, ${2:format})" ],
	[ "TO_NUMBER(value, format)\tDate Type"						, "TO_NUMBER(${1:value}, ${2:format})" ],
	[ "TO_TIMESTAMP(value, format)\tDate Type"					, "TO_TIMESTAMP(${1:value}, ${2:format})" ],
	[ "TO_TIMESTAMP(double)\tDate Type"							, "TO_TIMESTAMP(${1:double})" ],
	
	// Date/Time Functions
	[ "AGE(timestamp)\tDate/Time"								, "AGE(${1:start})" ],
	[ "AGE(timestamp, timestamp)\tDate/Time"					, "AGE(${1:start}, ${2:end})" ],
	[ "CLOCK_TIMESTAMP()\tDate/Time"							, "CLOCK_TIMESTAMP()" ],
	[ "CURRENT_DATE\tDate/Time"									, "CURRENT_DATE" ],
	[ "CURRENT_TIME\tDate/Time"									, "CURRENT_TIME" ],
	[ "CURRENT_TIME(precision)\tDate/Time"						, "CURRENT_TIME(${1:precision})" ],
	[ "CURRENT_TIMESTAMP\tDate/Time"							, "CURRENT_TIMESTAMP" ],
	[ "CURRENT_TIMESTAMP(precision)\tDate/Time"					, "CURRENT_TIMESTAMP(${1:precision})" ],
	[ "DATE_PART(subfield, timestamp)\tDate/Time"				, "DATE_PART(${1:subfield}, ${2:timestamp})" ],
	[ "DATE_PART(subfield, interval)\tDate/Time"				, "DATE_PART(${1:subfield}, ${2:interval})" ],
	[ "DATE_TRUNC(subfield, timestamp)\tDate/Time"				, "DATE_TRUNC(${1:subfield}, ${2:timestamp})" ],
	[ "EXTRACT(subfield from timestamp)\tDate/Time"				, "EXTRACT(${1:subfield} from ${2:timestamp})" ],
	[ "EXTRACT(subfield from interval)\tDate/Time"				, "EXTRACT(${1:subfield} from ${2:interval})" ],
	[ "ISFINITE(date)\tDate/Time"								, "ISFINITE(${1:date})" ],
	[ "ISFINITE(timestamp)\tDate/Time"							, "ISFINITE(${1:timestamp})" ],
	[ "ISFINITE(interval)\tDate/Time"							, "ISFINITE(${1:interval})" ],
	[ "JUSTIFY_DAYS(interval)\tDate/Time"						, "JUSTIFY_DAYS(${1:interval})" ],
	[ "JUSTIFY_HOURS(interval)\tDate/Time"						, "JUSTIFY_HOURS(${1:interval})" ],
	[ "JUSTIFY_INTERVAL(interval)\tDate/Time"					, "JUSTIFY_INTERVAL(${1:interval})" ],
	[ "LOCALTIME\tDate/Time"									, "LOCALTIME" ],
	[ "LOCALTIME(precision)\tDate/Time" 						, "LOCALTIME(${1:precision})" ],
	[ "LOCALTIMESTAMP\tDate/Time" 								, "LOCALTIMESTAMP" ],
	[ "LOCALTIMESTAMP(precision)\tDate/Time" 					, "LOCALTIMESTAMP(${1:precision})" ],
	[ "NOW()\tDate/Time" 										, "NOW()" ],
	[ "pg_sleep(seconds)\tDate/Time" 							, "pg_sleep(${1:seconds})" ],
	[ "STATEMENT_TIMESTAMP()\tDate/Time" 						, "STATEMENT_TIMESTAMP()" ],
	[ "TIMEOFDAY()\tDate/Time" 									, "TIMEOFDAY()" ],
	[ "TRANSACTION_TIMESTAMP()\tDate/Time" 						, "TRANSACTION_TIMESTAMP()" ],
	
	// Enum Support Functions
	[ "ENUM_FIRST(enum)\tEnum Support" 							, "ENUM_FIRST(${1:enum})" ],
	[ "ENUM_LAST(enum)\tEnum Support" 							, "ENUM_LAST(${1:enum})" ],
	[ "ENUM_RANGE(enum)\tEnum Support" 							, "ENUM_RANGE(${1:enum})" ],
	[ "ENUM_RANGE(enum, enum)\tEnum Support" 					, "ENUM_RANGE(${1:enum}, ${2:enum})" ],
	
	// Geometric Functions
	[ "AREA(object)\tGeometric"									, "AREA(${1:object})" ],
	[ "CENTER(object)\tGeometric"								, "CENTER(${1:object})" ],
	[ "DIAMETER(circle)\tGeometric"								, "DIAMETER(${1:circle})" ],
	[ "HEIGHT(box)\tGeometric"									, "HEIGHT(${1:box})" ],
	[ "ISCLOSED(path)\tGeometric"								, "ISCLOSED(${1:path})" ],
	[ "ISOPEN(path)\tGeometric"									, "ISOPEN(${1:path})" ],
	[ "LENGTH(object)\tGeometric"								, "LENGTH(${1:object})" ],
	[ "NPOINTS(path)\tGeometric"								, "NPOINTS(${1:path})" ],
	[ "NPOINTS(polygon)\tGeometric"								, "NPOINTS(${1:polygon})" ],
	[ "PCLOSE(path)\tGeometric"									, "PCLOSE(${1:path})" ],
	[ "POPEN(path)\tGeometric"									, "POPEN(${1:path})" ],
	[ "RADIUS(circle)\tGeometric"								, "RADIUS(${1:circle})" ],
	[ "WIDTH(box)\tGeometric"									, "WIDTH(${1:box})" ],
	
	// Geometric Type Conversion Functions
	[ "BOX(circle)\tGeometric Conversion"						, "BOX(${1:circle})" ],
	[ "BOX(point, point)\tGeometric Conversion"					, "BOX(${1:point}, ${2:point})" ],
	[ "BOX(polygon)\tGeometric Conversion"						, "BOX(${1:polygon})" ],
	[ "CIRCLE(box)\tGeometric Conversion"						, "CIRCLE(${1:box})" ],
	[ "CIRCLE(point, radius)\tGeometric Conversion"				, "CIRCLE(${1:point}, (${2:radius}))" ],
	[ "CIRCLE(polygon)\tGeometric Conversion"					, "CIRCLE(${1:polygon})" ],
	[ "LSEG(box)\tGeometric Conversion"							, "LSEG(${1:box})" ],
	[ "LSEG(point, point)\tGeometric Conversion"				, "LSEG(${1:point}, ${2:point})" ],
	[ "PATH(polygon)\tGeometric Conversion"						, "PATH(${1:polygon})" ],
	[ "POINT(double, double)\tGeometric Conversion"				, "POINT(${1:double}, ${2:double})" ],
	[ "POINT(box)\tGeometric Conversion"						, "POINT(${1:box})" ],
	[ "POINT(circle)\tGeometric Conversion"						, "POINT(${1:circle})" ],
	[ "POINT(lseg)\tGeometric Conversion"						, "POINT(${1:lseg})" ],
	[ "POINT(polygon)\tGeometric Conversion"					, "POINT(${1:polygon})" ],
	[ "POLYGON(box)\tGeometric Conversion"						, "POLYGON(${1:box})" ],
	[ "POLYGON(circle)\tGeometric Conversion"					, "POLYGON(${1:circle})" ],
	[ "POLYGON(npts, circle)\tGeometric Conversion"				, "POLYGON(${1:npts}, ${2:circle})" ],
	[ "POLYGON(path)\tGeometric Conversion"						, "POLYGON(${1:path})" ],
	
	// Network Address Functions
	[ "ABBREV(inet)\tNetwork Address"							, "ABBREV(${1:inet})" ],
	[ "ABBREV(cidr)\tNetwork Address"							, "ABBREV(${1:cidr})" ],
	[ "BROADCAST(inet)\tNetwork Address"						, "BROADCAST(${1:inet})" ],
	[ "FAMILY(inet)\tNetwork Address"							, "FAMILY(${1:inet})" ],
	[ "HOST(inet)\tNetwork Address"								, "HOST(${1:inet})" ],
	[ "HOSTMASK(inet)\tNetwork Address"							, "HOSTMASK(${1:inet})" ],
	[ "MASKLEN(inet)\tNetwork Address"							, "MASKLEN(${1:inet})" ],
	[ "NETMASK(inet)\tNetwork Address"							, "NETMASK(${1:inet})" ],
	[ "NETWORK(inet)\tNetwork Address"							, "NETWORK(${1:inet})" ],
	[ "SET_MASKLEN(inet, len)\tNetwork Address"					, "SET_MASKLEN(${1:inet}, ${2:len})" ],
	[ "SET_MASKLEN(cidr, len)\tNetwork Address"					, "SET_MASKLEN(${1:cidr}, ${2:len})" ],
	[ "TEXT(inet)\tNetwork Address"								, "TEXT(${1:inet})" ],
	[ "TRUNC(macaddr)\tNetwork Address"							, "TRUNC(${1:macaddr})" ],
	
	// Text Search Functions
	[ "GET_CURRENT_TS_CONFIG()\tText Search"					, "GET_CURRENT_TS_CONFIG()" ],
	[ "LENGTH(tsvector)\tText Search"							, "LENGTH(${1:tsvector})" ],
	[ "NUMNODE(tsquery)\tText Search"							, "NUMNODE(${1:tsquery})" ],
	[ "PLAINTO_TSQUERY(query)\tText Search"						, "PLAINTO_TSQUERY(${1:query})" ],
	[ "PLAINTO_TSQUERY(config, query)\tText Search"				, "PLAINTO_TSQUERY(${1:config}, ${2:query})" ],
	[ "QUERYTREE(tsquery)\tText Search"							, "QUERYTREE(${1:tsquery})" ],
	[ "SETWEIGHT(tsvector, char)\tText Search"					, "SETWEIGHT(${1:tsvector}, ${2:char})" ],
	[ "STRIP(tsvector)\tText Search"							, "STRIP(${1:tsvector})" ],
	[ "TO_TSQUERY(query)\tText Search"							, "TO_TSQUERY(${1:query})" ],
	[ "TO_TSQUERY(config, query)\tText Search"					, "TO_TSQUERY(${1:config}, ${2:query})" ],
	[ "TO_TSVECTOR(document)\tText Search"						, "TO_TSVECTOR(${1:document})" ],
	[ "TO_TSVECTOR(config, document)\tText Search"				, "TO_TSVECTOR(${1:config}, ${2:document})" ],
	[ "TS_HEADLINE(document, query)\tText Search"				, "TS_HEADLINE(${1:document}, ${2:query})" ],
	[ "TS_HEADLINE(config, document, query)\tText Search"		, "TS_HEADLINE(${1:config}, ${2:document}, ${3:query})" ],
	[ "TS_HEADLINE(document, query, options)\tText Search"		, "TS_HEADLINE(${1:document}, ${2:query}, ${3:options})" ],
	[ "TS_HEADLINE(config, document, query, options)\tText Search", "TS_HEADLINE(${1:config}, ${2:document}, ${3:query}, ${4:options})" ],
	[ "TS_RANK(vector, query)\tText Search"						, "TS_RANK(${1:vector}, {$2:query})" ],
	[ "TS_RANK(weights, vector, query)\tText Search"			, "TS_RANK(${1:weights}, ${2:vector}, {$3:query})" ],
	[ "TS_RANK(vector, query, normalization)\tText Search"		, "TS_RANK(${1:vector}, {$2:query}, ${3:normalization})" ],
	[ "TS_RANK(weights, vector, query, normalization)\tText Search", "TS_RANK(${1:weights}, ${2:vector}, {$3:query}, ${4:normalization})" ],
	[ "TS_RANK_CD(vector, query)\tText Search"					, "TS_RANK_CD(${1:vector}, {$2:query})" ],
	[ "TS_RANK_CD(weights, vector, query)\tText Search"			, "TS_RANK_CD(${1:weights}, ${2:vector}, {$3:query})" ],
	[ "TS_RANK_CD(vector, query, normalization)\tText Search"	, "TS_RANK_CD(${1:vector}, {$2:query}, ${3:normalization})" ],
	[ "TS_RANK_CD(weights, vector, query, normalization)\tText Search", "TS_RANK_CD(${1:weights}, ${2:vector}, {$3:query}, ${4:normalization})" ],
	[ "TS_REWRITE(query, target, substitute)\tText Search"		, "TS_REWRITE(${1:query}, ${2:target}, ${3:substitute})" ],
	[ "TS_REWRITE(query, select)\tText Search"					, "TS_REWRITE(${1:query}, ${2:select})" ],
	[ "TSVECTOR_UPDATE_TRIGGER()\tText Search"					, "TSVECTOR_UPDATE_TRIGGER()" ],
	[ "TSVECTOR_UPDATE_TRIGGER_COLUMN()\tText Search"			, "TSVECTOR_UPDATE_TRIGGER_COLUMN()" ],
	
	// Text Search Debugging Functions
	[ "TS_DEBUG(document)\tText Search"							, "TS_DEBUG(${1:document})" ],
	[ "TS_DEBUG(config, document)\tText Search"					, "TS_DEBUG(${1:config}, ${2:document})" ],
	[ "TS_LEXIZE(dict, token)\tText Search"						, "TS_LEXIZE(${1:dict}, ${2:token})" ],
	[ "TS_PARSE(parser, document)\tText Search"					, "TS_PARSE(${1:parser}, ${2:document})" ],
	[ "TS_TOKEN_TYPE(parser)\tText Search"						, "TS_TOKEN_TYPE(${1:parser})" ],
	[ "TS_STAT(sqlquery)\tText Search"							, "TS_STAT(${1:sqlquery})" ],
	[ "TS_STAT(sqlquery, weights)\tText Search"					, "TS_STAT(${1:sqlquery}, ${2:weights})" ],
	
	// XML Functions
	[ "XMLCOMMENT(text)\tXML"											, "XMLCOMMENT(${1:text})" ],
	[ "XMLCONCAT(xml, ...)\tXML"										, "XMLCONCAT(${1:xml}, ${2:xml})" ],
	[ "XMLELEMENT(name \"node\")\tXML"									, "XMLELEMENT(name \"${1:node}\")" ],
	[ "XMLELEMENT(name \"node\", content, ...)\tXML"					, "XMLELEMENT(name \"${1:node}\", ${2:content})" ],
	[ "XMLFOREST(content AS \"node\", ...)\tXML"						, "XMLFOREST(${1:content} AS \"${2:node}\", ${3:content} AS \"${4:node}\")" ],
	[ "XMLPI(name target)\tXML"											, "XMLPI(name ${1:target})" ],
	[ "XMLPI(name target, content)\tXML"								, "XMLPI(name ${1:target}, ${2:content})" ],
	[ "XMLROOT(xml, version v)\tXML"									, "XMLROOT(${1:xml}, version ${2:v})" ],
	[ "XMLROOT(xml, version no value)\tXML"								, "XMLROOT(${1:xml}, version no value)" ],
	[ "XMLROOT(xml, version v, standalone b)\tXML"						, "XMLROOT(${1:xml}, version ${2:v}, standalone ${3:b})" ],
	[ "XMLROOT(xml, version no value, standalone b)\tXML"				, "XMLROOT(${1:xml}, version no value, standalone ${3:b})" ],
	[ "XMLROOT(xml, version v, standalone no value)\tXML"				, "XMLROOT(${1:xml}, version ${2:v}, standalone no value)" ],
	[ "XMLROOT(xml, version no value, standalone no value)\tXML"		, "XMLROOT(${1:xml}, version no value, standalone no value)" ],
	[ "XMLAGG(xml)\tXML"												, "XML(${1:xml})" ],
	[ "XMLEXISTS(text PASSING BY REF xml BY REF)\tXML"					, "XMLEXISTS(${1:text} PASSING BY REF ${2:xml} BY REF)" ],
	[ "XML_IS_WELL_FORMED(text)\tXML"									, "XML_IS_WELL_FORMED(${1:text})" ],
	[ "XML_IS_WELL_FORMED_DOCUMENT(text)\tXML"							, "XML_IS_WELL_FORMED_DOCUMENT(${1:text})" ],
	[ "XML_IS_WELL_FORMED_CONTENT(text)\tXML"							, "XML_IS_WELL_FORMED_CONTENT(${1:text})" ],
	[ "XPATH(xpath, xml)\tXML"											, "XPATH(${1:xpath}, ${2:xml})" ],
	[ "XPATH(xpath, xml, nsarray)\tXML"									, "XPATH(${1:xpath}, ${2:xml}, ${3:nsarray})" ],
	[ "XPATH_EXISTS(xpath, xml)\tXML"									, "XPATH_EXISTS(${1:xpath}, ${2:xml})" ],
	[ "XPATH_EXISTS(xpath, xml, nsarray)\tXML"							, "XPATH_EXISTS(${1:xpath}, ${2:xml}, ${3:nsarray})" ],
	[ "CURSOR_TO_XML(cursor, count, nulls, tableforest, targetns)\tXML"	, "CURSOR_TO_XML(${1:cursor}, ${2:count}, ${3:nulls}, ${4:tableforest}, ${5:targetns})" ],
	[ "CURSOR_TO_XMLSCHEMA(cursor, nulls, tableforest, targetns)\tXML"	, "CURSOR_TO_XMLSCHEMA(${1:cursor}, ${2:nulls}, ${3:tableforest}, ${4:targetns})" ],
	[ "QUERY_TO_XML(query, nulls, tableforest, targetns)\tXML"			, "QUERY_TO_XML(${1:query}, ${2:nulls}, ${3:tableforest}, ${4:targetns})" ],
	[ "QUERY_TO_XMLSCHEMA(query, nulls, tableforest, targetns)\tXML"	, "QUERY_TO_XMLSCHEMA(${1:query}, ${2:nulls}, ${3:tableforest}, ${4:targetns})" ],
	[ "QUERY_TO_AND_XMLSCHEMA(query, nulls, tableforest, targetns)\tXML", "QUERY_TO_AND_XMLSCHEMA(${1:query}, ${2:nulls}, ${3:tableforest}, ${4:targetns})" ],
	[ "TABLE_TO_XML(table, nulls, tableforest, targetns)\tXML"			, "TABLE_TO_XML(${1:table}, ${2:nulls}, ${3:tableforest}, ${4:targetns})" ],
	[ "TABLE_TO_XMLSCHEMA(table, nulls, tableforest, targetns)\tXML"	, "TABLE_TO_XMLSCHEMA(${1:table}, ${2:nulls}, ${3:tableforest}, ${4:targetns})" ],
	[ "TABLE_TO_AND_XMLSCHEMA(table, nulls, tableforest, targetns)\tXML", "TABLE_TO_AND_XMLSCHEMA(${1:table}, ${2:nulls}, ${3:tableforest}, ${4:targetns})" ],
	[ "SCHEMA_TO_XML(schema, nulls, tableforest, targetns)\tXML"		, "SCHEMA_TO_XML(${1:schema}, ${2:nulls}, ${3:tableforest}, ${4:targetns})" ],
	[ "SCHEMA_TO_XMLSCHEMA(schema, nulls, tableforest, targetns)\tXML"	, "SCHEMA_TO_XMLSCHEMA(${1:schema}, ${2:nulls}, ${3:tableforest}, ${4:targetns})" ],
	[ "SCHEMA_TO_AND_XMLSCHEMA(schema, nulls, tableforest, targetns)\tXML", "SCHEMA_TO_AND_XMLSCHEMA(${1:schema}, ${2:nulls}, ${3:tableforest}, ${4:targetns})" ],
	[ "DATABASE_TO_XML(nulls, tableforest, targetns)\tXML"				, "DATABASE_TO_XML(${1:nulls}, ${2:tableforest}, ${3:targetns})" ],
	[ "DATABASE_TO_XMLSCHEMA(nulls, tableforest, targetns)\tXML"		, "DATABASE_TO_XMLSCHEMA(${1:nulls}, ${2:tableforest}, ${3:targetns})" ],
	[ "DATABASE_TO_AND_XMLSCHEMA(nulls, tableforest, targetns)\tXML"	, "DATABASE_TO_AND_XMLSCHEMA(${1:nulls}, ${2:tableforest}, ${3:targetns})" ],
	
	// JSON Functions
	[ "ARRAY_TO_JSON(array)\tJSON"								, "ARRAY_TO_JSON(${1:array})" ],
	[ "ARRAY_TO_JSON(array, pretty)\tJSON"						, "ARRAY_TO_JSON(${1:array}, ${2:pretty})" ],
	[ "ROW_TO_JSON(record)\tJSON"								, "ROW_TO_JSON(${1:record})" ],
	[ "ROW_TO_JSON(record, pretty)\tJSON"						, "ROW_TO_JSON(${1:record}, ${2:pretty})" ],
	
	// Sequence Functions
	[ "CURVAL(sequence)\tSequence"								, "CURVAL(${1:sequence})" ],
	[ "LASTVAL()\tSequence"										, "LASTVAL()" ],
	[ "NEXTVAL(sequence)\tSequence"								, "NEXTVAL(${1:sequence})" ],
	[ "SETVAL(sequence, value)\tSequence"						, "SETVAL(${1:sequence}, ${2:value})" ],
	[ "SETVAL(sequence, value, is_called)\tSequence"			, "SETVAL(${1:sequence}, ${2:value}, ${3:is_called})" ],
	
	// Array Functions
	[ "ARRAY_APPEND(array, element)\tArray"						, "ARRAY_APPEND(${1:array}, ${2:element})" ],
	[ "ARRAY_CAT(array, array2)\tArray"							, "ARRAY_CAT(${1:array}, ${2:array2})" ],
	[ "ARRAY_NDIMS(array)\tArray"								, "ARRAY_NDIMS(${1:array})" ],
	[ "ARRAY_DIMS(array)\tArray"								, "ARRAY_DIMS(${1:array})" ],
	[ "ARRAY_FILL(element, dims, bounds)\tArray"				, "ARRAY_FILL(${1:array}, ${2:dims}, ${3:bounds})" ],
	[ "ARRAY_LENGTH(array, dimension)\tArray"					, "ARRAY_LENGTH(${1:array}, ${2:dimension})" ],
	[ "ARRAY_LOWER(array, dimension)\tArray"					, "ARRAY_LOWER(${1:array}, ${2:dimension})" ],
	[ "ARRAY_PREPEND(element, array)\tArray"					, "ARRAY_PREPEND(${1:element}, ${2:array})" ],
	[ "ARRAY_TO_STRING(array, delimiter)\tArray"				, "ARRAY_TO_STRING(${1:array}, ${2:delimiter})" ],
	[ "ARRAY_TO_STRING(array, delimiter, nulltext)\tArray"		, "ARRAY_TO_STRING(${1:array}, ${2:delimiter}, ${3:nulltext})" ],
	[ "ARRAY_UPPER(array, dimension)\tArray"					, "ARRAY_UPPER(${1:array}, ${2:dimension})" ],
	[ "STRING_TO_ARRAY(string, delimiter)\tArray"				, "STRING_TO_ARRAY(${1:string}, ${2:delimiter})" ],
	[ "STRING_TO_ARRAY(string, delimiter, nulltext)\tArray"		, "STRING_TO_ARRAY(${1:string}, ${2:delimiter}, ${3:nulltext})" ],
	[ "UNNEST(array)\tArray"									, "UNNEST(${1:array})" ],
	
	// Range Functions
	[ "LOWER(range)\tRange"										, "LOWER(${1:range})" ],
	[ "UPPER(range)\tRange"										, "UPPER(${1:range})" ],
	[ "ISEMPTY(range)\tRange"									, "ISEMPTY(${1:range})" ],
	[ "LOWER_INC(range)\tRange"									, "LOWER_INC(${1:range})" ],
	[ "UPPER_INC(range)\tRange"									, "UPPER_INC(${1:range})" ],
	[ "LOWER_INF(range)\tRange"									, "LOWER_INF(${1:range})" ],
	[ "UPPER_INF(range)\tRange"									, "UPPER_INF(${1:range})" ],
	
	// Aggregate Functions
	[ "ARRAY_AGG(exp)\tAggregate"								, "ARRAY_AGG(${1:expression})" ],
	[ "AVG(exp)\tAggregate"										, "AVG(${1:expression})" ],
	[ "BIT_AND(exp)\tAggregate"									, "BIT_AND(${1:expression})" ],
	[ "BIT_OR(exp)\tAggregate"									, "BIT_OR(${1:expression})" ],
	[ "BOOL_AND(exp)\tAggregate"								, "BOOL_AND(${1:expression})" ],
	[ "BOOL_OR(exp)\tAggregate"									, "BOOL_OR(${1:expression})" ],
	[ "COUNT(*)\tAggregate"										, "COUNT(*)" ],
	[ "COUNT(exp)\tAggregate"									, "COUNT(${1:expression})" ],
	[ "EVERY(exp)\tAggregate"									, "EVERY(${1:expression})" ],
	[ "MAX(exp)\tAggregate"										, "MAX(${1:expression})" ],
	[ "MIN(exp)\tAggregate"										, "MIN(${1:expression})" ],
	[ "STRING_AGG(exp, delimiter)\tAggregate"					, "STRING_AGG(${1:expression}, ${2:delimiter})" ],
	[ "SUM(exp)\tAggregate"										, "SUM(${1:expression})" ],
	
	// Aggregate Functions for Statistics
	[ "CORR(y, x)\tAggregate (Stat.)"							, "CORR(${1:y}, ${2:x})" ],
	[ "COVAR_POP(y, x)\tAggregate (Stat.)"						, "COVAR_POP(${1:y}, ${2:x})" ],
	[ "COVAR_SAMP(y, x)\tAggregate (Stat.)"						, "COVAR_SAMP(${1:y}, ${2:x})" ],
	[ "REGR_AVGX(y, x)\tAggregate (Stat.)"						, "REGR_AVGX(${1:y}, ${2:x})" ],
	[ "REGR_AVGY(y, x)\tAggregate (Stat.)"						, "REGR_AVGY(${1:y}, ${2:x})" ],
	[ "REGR_COUNT(y, x)\tAggregate (Stat.)"						, "REGR_COUNT(${1:y}, ${2:x})" ],
	[ "REGR_INTERCEPT(y, x)\tAggregate (Stat.)"					, "REGR_INTERCEPT(${1:y}, ${2:x})" ],
	[ "REGR_R2(y, x)\tAggregate (Stat.)"						, "REGR_R2(${1:y}, ${2:x})" ],
	[ "REGR_SLOPE(y, x)\tAggregate (Stat.)"						, "REGR_SLOPE(${1:y}, ${2:x})" ],
	[ "REGR_SXX(y, x)\tAggregate (Stat.)"						, "REGR_SXX(${1:y}, ${2:x})" ],
	[ "REGR_SXY(y, x)\tAggregate (Stat.)"						, "REGR_SXY(${1:y}, ${2:x})" ],
	[ "REGR_SYY(y, x)\tAggregate (Stat.)"						, "REGR_SYY(${1:y}, ${2:x})" ],
	[ "STDDEV(exp)\tAggregate (Stat.)"							, "STDDEV(${1:expression})" ],
	[ "STDDEV_POP(exp)\tAggregate (Stat.)"						, "STDDEV_POP(${1:expression})" ],
	[ "STDDEV_SAMP(exp)\tAggregate (Stat.)"						, "STDDEV_SAMP(${1:expression})" ],
	[ "VARIANCE(exp)\tAggregate (Stat.)"						, "VARIANCE(${1:expression})" ],
	[ "VAR_POP(exp)\tAggregate (Stat.)"							, "VAR_POP(${1:expression})" ],
	[ "VAR_SAMP(exp)\tAggregate (Stat.)"						, "VAR_SAMP(${1:expression})" ],
	
	// General-Purpose Window Functions
	[ "ROW_NUMBER()\tWindow"									, "ROW_NUMBER()" ],
	[ "RANK()\tWindow"											, "RANK()" ],
	[ "DENSE_RANK()\tWindow"									, "DENSE_RANK()" ],
	[ "PERCENT_RANK()\tWindow"									, "PERCENT_RANK()" ],
	[ "CUME_DIST()\tWindow"										, "CUME_DIST()" ],
	[ "NTILE(num_buckets)\tWindow"								, "NTILE(${1:num_buckets})" ],
	[ "LAG(value)\tWindow"										, "LAG(${1:value})" ],
	[ "LAG(value, offset)\tWindow"								, "LAG(${1:value}, ${2:offset})" ],
	[ "LAG(value, offset, default)\tWindow"						, "LAG(${1:value}, ${2:offset}, ${3:default})" ],
	[ "LEAD(value)\tWindow"										, "LEAD(${1:value})" ],
	[ "LEAD(value, offset)\tWindow"								, "LEAD(${1:value}, ${2:offset})" ],
	[ "LEAD(value, offset, default)\tWindow"					, "LEAD(${1:value}, ${2:offset}, ${3:default})" ],
	[ "FIRST_VALUE(value)\tWindow"								, "FIRST_VALUE(${1:value})" ],
	[ "LAST_VALUE(value)\tWindow"								, "LAST_VALUE(${1:value})" ],
	[ "NTH_VALUE(value, n)\tWindow"								, "NTH_VALUE(${1:value}, ${2:n})" ],
	
	// Set Returning Functions
	[ "GENERATE_SERIES(start, stop)\tReturning"					, "GENERATE_SERIES(${1:start}, ${2:stop})" ],
	[ "GENERATE_SERIES(start, stop, step)\tReturning"			, "GENERATE_SERIES(${1:start}, ${2:stop}, ${3:step})" ],
	[ "GENERATE_SUBSCRIPTS(arry, dim)\tReturning"				, "GENERATE_SUBSCRIPTS(${1:array}, ${2:dim})" ],
	[ "GENERATE_SUBSCRIPTS(arry, dim, reverse)\tReturning"		, "GENERATE_SUBSCRIPTS(${1:array}, ${2:dim}, ${3:reverse})" ],
	
	// System Information Functions
	[ "CURRENT_CATALOG\tSystem Information"						, "CURRENT_CATALOG" ],
	[ "CURRENT_DATABASE()\tSystem Information"					, "CURRENT_DATABASE()" ],
	[ "CURRENT_QUERY()\tSystem Information"						, "CURRENT_QUERY()" ],
	[ "CURRENT_SCHEMA()\tSystem Information"					, "CURRENT_SCHEMA()" ],
	[ "CURRENT_SCHEMAS(addimplicit)\tSystem Information"		, "CURRENT_SCHEMAS(${1:addimplicit})" ],
	[ "CURRENT_USER\tSystem Information"						, "CURRENT_USER" ],
	[ "INET_CLIENT_ADDR()\tSystem Information"					, "INET_CLIENT_ADDR()" ],
	[ "INET_CLIENT_PORT()\tSystem Information"					, "INET_CLIENT_PORT()" ],
	[ "INET_SERVER_ADDR()\tSystem Information"					, "INET_SERVER_ADDR()" ],
	[ "INET_SERVER_PORT()\tSystem Information"					, "INET_SERVER_PORT()" ],
	[ "pg_backend_pid()\tSystem Information"					, "pg_backend_pid()" ],
	[ "pg_conf_load_time()\tSystem Information"					, "pg_conf_load_time()" ],
	[ "pg_is_other_temp_schema(old)\tSystem Information"		, "pg_is_other_temp_schema(${1:old})" ],
	[ "pg_listening_channels()\tSystem Information"				, "pg_listening_channels()" ],
	[ "pg_my_temp_schema()\tSystem Information"					, "pg_my_temp_schema()" ],
	[ "pg_postmaster_start_time()\tSystem Information"			, "pg_postmaster_start_time()" ],
	[ "pg_trigger_depth\tSystem Information"					, "pg_trigger_depth" ],
	[ "SESSION_USER\tSystem Information"						, "SESSION_USER" ],
	[ "USER\tSystem Information"								, "USER" ],
	[ "VERSION()\tSystem Information"							, "VERSION()" ],
	
	// Access Privilege Inquiry Functions
	[ "HAS_ANY_COLUMN_PRIVILEGE(table, privilege)\tAccess Privilege"				, "HAS_ANY_COLUMN_PRIVILEGE(${1:table}, ${2:privilege})" ],
	[ "HAS_ANY_COLUMN_PRIVILEGE(user, table, privilege)\tAccess Privilege"			, "HAS_ANY_COLUMN_PRIVILEGE(${1:user}, ${2:table}, ${3:privilege})" ],
	[ "HAS_COLUMN_PRIVILEGE(table, column, privilege)\tAccess Privilege"			, "HAS_COLUMN_PRIVILEGE(${1:table}, ${2:column}, ${3:privilege})" ],
	[ "HAS_COLUMN_PRIVILEGE(user, table, column, privilege)\tAccess Privilege"		, "HAS_COLUMN_PRIVILEGE(${1:user}, ${2:table}, ${3:column}, ${4:privilege})" ],
	[ "HAS_DATABASE_PRIVILEGE(database, privilege)\tAccess Privilege"				, "HAS_DATABASE_PRIVILEGE(${1:database}, ${2:privilege})" ],
	[ "HAS_DATABASE_PRIVILEGE(user, database, privilege)\tAccess Privilege"			, "HAS_DATABASE_PRIVILEGE(${1:user}, ${2:database}, ${3:privilege})" ],
	[ "HAS_FOREIGN_DATA_WRAPPER_PRIVILEGE(fdw, privilege)\tAccess Privilege"		, "HAS_FOREIGN_DATA_WRAPPER_PRIVILEGE(${1:fdw}, ${2:privilege})" ],
	[ "HAS_FOREIGN_DATA_WRAPPER_PRIVILEGE(user, fdw, privilege)\tAccess Privilege"	, "HAS_FOREIGN_DATA_WRAPPER_PRIVILEGE(${1:user}, ${2:fdw}, ${3:privilege})" ],
	[ "HAS_FUNCTION_PRIVILEGE(function, privilege)\tAccess Privilege"				, "HAS_FUNCTION_PRIVILEGE(${1:function}, ${2:privilege})" ],
	[ "HAS_FUNCTION_PRIVILEGE(user, function, privilege)\tAccess Privilege"			, "HAS_FUNCTION_PRIVILEGE(${1:user}, ${2:function}, ${3:privilege})" ],
	[ "HAS_LANGUAGE_PRIVILEGE(language, privilege)\tAccess Privilege"				, "HAS_LANGUAGE_PRIVILEGE(${1:language}, ${2:privilege})" ],
	[ "HAS_LANGUAGE_PRIVILEGE(user, language, privilege)\tAccess Privilege"			, "HAS_LANGUAGE_PRIVILEGE(${1:user}, ${2:language}, ${3:privilege})" ],
	[ "HAS_SCHEMA_PRIVILEGE(schema, privilege)\tAccess Privilege"					, "HAS_SCHEMA_PRIVILEGE(${1:schema}, ${2:privilege})" ],
	[ "HAS_SCHEMA_PRIVILEGE(user, schema, privilege)\tAccess Privilege"				, "HAS_SCHEMA_PRIVILEGE(${1:user}, ${2:schema}, ${3:privilege})" ],
	[ "HAS_SEQUENCE_PRIVILEGE(sequence, privilege)\tAccess Privilege"				, "HAS_SEQUENCE_PRIVILEGE(${1:sequence}, ${2:privilege})" ],
	[ "HAS_SEQUENCE_PRIVILEGE(user, sequence, privilege)\tAccess Privilege"			, "HAS_SEQUENCE_PRIVILEGE(${1:user}, ${2:sequence}, ${3:privilege})" ],
	[ "HAS_SERVER_PRIVILEGE(server, privilege)\tAccess Privilege"					, "HAS_SERVER_PRIVILEGE(${1:server}, ${2:privilege})" ],
	[ "HAS_SERVER_PRIVILEGE(user, server, privilege)\tAccess Privilege"				, "HAS_SERVER_PRIVILEGE(${1:user}, ${2:server}, ${3:privilege})" ],
	[ "HAS_TABLE_PRIVILEGE(table, privilege)\tAccess Privilege"						, "HAS_TABLE_PRIVILEGE(${1:table}, ${2:privilege})" ],
	[ "HAS_TABLE_PRIVILEGE(user, table, privilege)\tAccess Privilege"				, "HAS_TABLE_PRIVILEGE(${1:user}, ${2:table}, ${3:privilege})" ],
	[ "HAS_TABLESPACE_PRIVILEGE(tablespace, privilege)\tAccess Privilege"			, "HAS_TABLESPACE_PRIVILEGE(${1:tablespace}, ${2:privilege})" ],
	[ "HAS_TABLESPACE_PRIVILEGE(user, tablespace, privilege)\tAccess Privilege"		, "HAS_TABLESPACE_PRIVILEGE(${1:user}, ${2:tablespace}, ${3:privilege})" ],
	[ "pg_has_role(role, privilege)\tAccess Privilege"								, "pg_has_role(${1:role}, ${2:privilege})" ],
	[ "pg_has_role(user, role, privilege)\tAccess Privilege"						, "pg_has_role(${1:user}, ${2:role}, ${3:privilege})" ],
	
	// Schema Visibility Inquiry Functions
	[ "pg_collation_is_visible(oid)\tSchema Visibility"			, "pg_collation_is_visible(${1:oid})" ],
	[ "pg_conversion_is_visible(oid)\tSchema Visibility"		, "pg_conversion_is_visible(${1:oid})" ],
	[ "pg_function_is_visible(oid)\tSchema Visibility"			, "pg_function_is_visible(${1:oid})" ],
	[ "pg_opclass_is_visible(oid)\tSchema Visibility"			, "pg_opclass_is_visible(${1:oid})" ],
	[ "pg_opfamily_is_visible(oid)\tSchema Visibility"			, "pg_opfamily_is_visible(${1:oid})" ],
	[ "pg_table_is_visible(oid)\tSchema Visibility"				, "pg_table_is_visible(${1:oid})" ],
	[ "pg_ts_config_is_visible(oid)\tSchema Visibility"			, "pg_ts_config_is_visible(${1:oid})" ],
	[ "pg_ts_dict_is_visible(oid)\tSchema Visibility"			, "pg_ts_dict_is_visible(${1:oid})" ],
	[ "pg_ts_parser_is_visible(oid)\tSchema Visibility"			, "pg_ts_parser_is_visible(${1:oid})" ],
	[ "pg_ts_template_is_visible(oid)\tSchema Visibility"		, "pg_ts_template_is_visible(${1:oid})" ],
	[ "pg_type_is_visible(oid)\tSchema Visibility"				, "pg_type_is_visible(${1:oid})" ],
	
	// System Catalog Information Functions
	[ "FORMAT_TYPE(oid, typemod)\tSystem Catalog"				, "FORMAT_TYPE(${1:oid}, ${2:typemod})" ],
	[ "pg_describe_object(catalog_id, object_id, object_sub_id)\tSystem Catalog", "pg_describe_object(${1:catalog_id}, ${2:object_id}, ${3:object_sub_id})" ],
	[ "pg_constraintdef(oid)\tSystem Catalog"					, "pg_constraintdef(${1:oid})" ],
	[ "pg_constraintdef(oid, pretty)\tSystem Catalog"			, "pg_constraintdef(${1:oid}, ${2:pretty})" ],
	[ "pg_get_expr(pg_node_tree, oid)\tSystem Catalog"			, "pg_get_expr(${1:pg_node_tree}, ${2:oid})" ],
	[ "pg_get_expr(pg_node_tree, oid, pretty)\tSystem Catalog"	, "pg_get_expr(${1:pg_node_tree}, ${2:oid}, ${3:pretty})" ],
	[ "pg_get_functiondef(oid)\tSystem Catalog"					, "pg_get_functiondef(${1:oid})" ],
	[ "pg_get_function_arguments(oid)\tSystem Catalog"			, "pg_get_function_arguments(${1:oid})" ],
	[ "pg_get_function_identity_arguments(oid)\tSystem Catalog"	, "pg_get_function_identity_arguments(${1:oid})" ],
	[ "pg_get_function_result(oid)\tSystem Catalog"				, "pg_get_function_result(${1:oid})" ],
	[ "pg_get_indexdef(oid)\tSystem Catalog"					, "pg_get_indexdef(${1:oid})" ],
	[ "pg_get_indexdef(oid, column_no, pretty)\tSystem Catalog"	, "pg_get_indexdef(${1:oid}, ${2:column_no}, ${3:pretty})" ],
	[ "pg_get_keywords()\tSystem Catalog"						, "pg_get_keywords()" ],
	[ "pg_get_ruledef(oid)\tSystem Catalog"						, "pg_get_ruledef(${1:oid})" ],
	[ "pg_get_ruledef(oid, pretty)\tSystem Catalog"				, "pg_get_ruledef(${1:oid}, ${2:pretty})" ],
	[ "pg_get_serial_sequence(table, column)\tSystem Catalog"	, "pg_get_serial_sequence(${1:table}, ${2:column})" ],
	[ "pg_get_triggerdef(oid)\tSystem Catalog"					, "pg_get_triggerdef(${1:oid})" ],
	[ "pg_get_triggerdef(oid, pretty)\tSystem Catalog"			, "pg_get_triggerdef(${1:oid}, ${2:pretty})" ],
	[ "pg_get_userbyid(oid)\tSystem Catalog"					, "pg_get_userbyid(${1:oid})" ],
	[ "pg_get_viewdef(name)\tSystem Catalog"					, "pg_get_viewdef(${1:name})" ],
	[ "pg_get_viewdef(name, pretty)\tSystem Catalog"			, "pg_get_viewdef(${1:name}, ${2:pretty})" ],
	[ "pg_get_viewdef(oid)\tSystem Catalog"						, "pg_get_viewdef(${1:oid})" ],
	[ "pg_get_viewdef(oid, pretty)\tSystem Catalog"				, "pg_get_viewdef(${1:oid}, ${2:pretty})" ],
	[ "pg_get_viewdef(oid, wrap_column)\tSystem Catalog"		, "pg_get_viewdef(${1:oid}, ${2:wrap_column})" ],
	[ "pg_options_to_table(reloptions)\tSystem Catalog"			, "pg_options_to_table(${1:reloptions})" ],
	[ "pg_tablespace_databases(oid)\tSystem Catalog"			, "pg_tablespace_databases(${1:oid})" ],
	[ "pg_tablespace_location(oid)\tSystem Catalog"				, "pg_tablespace_location(${1:oid})" ],
	[ "pg_typeof(value)\tSystem Catalog"						, "pg_typeof(${1:value})" ],
	[ "COLLATION for (value)\tSystem Catalog"					, "COLLATION for (${1:value})" ],
	[ "COL_DESCRIPTION(table_oid, column_no)\tSystem Catalog"	, "COL_DESCRIPTION(${1:table_oid}, ${2:column_no})" ],
	[ "OBJ_DESCRIPTION(oid, catalog_name)\tSystem Catalog"		, "OBJ_DESCRIPTION(${1:oid}, ${2:catalog_name})" ],
	[ "OBJ_DESCRIPTION(oid)\tSystem Catalog"					, "OBJ_DESCRIPTION(${1:oid})" ],
	[ "SHOBJ_DESCRIPTION(oid, catalog_name)\tSystem Catalog"	, "SHOBJ_DESCRIPTION(${1:oid}, ${2:catalog_name})" ],
	
	// Transaction IDs and Snapshots
	[ "TXID_CURRENT()\tTransaction/Snapshots"					, "TXID_CURRENT()" ],
	[ "TXID_CURRENT_SNAPSHOT()\tTransaction/Snapshots"			, "TXID_CURRENT_SNAPSHOT()" ],
	[ "TXID_SNAPSHOT_XIP(txid_snapshot)\tTransaction/Snapshots"	, "TXID_SNAPSHOT_XIP(${1:txid_snapshot})" ],
	[ "TXID_SNAPSHOT_XMAX(txid_snapshot)\tTransaction/Snapshots", "TXID_SNAPSHOT_XMAX(${1:txid_snapshot})" ],
	[ "TXID_SNAPSHOT_XMIN(txid_snapshot)\tTransaction/Snapshots", "TXID_SNAPSHOT_XMIN(${1:txid_snapshot})" ],
	[ "TXID_VISIBLE_IN_SNAPSHOT(txid, txid_snapshot)\tTransaction/Snapshots", "TXID_VISIBLE_IN_SNAPSHOT(${1:txid}, ${2:txid_snapshot})" ],
	
	// Configuration Setting Functions
	[ "CURENT_SETTING(name)\tSettings"							, "CURRRENT_SETTING(${1:name})" ],
	[ "SET_CONFIG(name, value, is_local)\tSettings"				, "SET_CONFIG(${1:name}, ${2:value}, ${3:is_local})" ],
	
	// Server Signalling Functions
	[ "pg_cancel_backend(pid)\tServer Signalling"				, "pg_cancel_backend(${1:pid})" ],
	[ "pg_reload_conf()\tServer Signalling"						, "pg_reload_conf()" ],
	[ "pg_rotate_logfile()\tServer Signalling"					, "pg_rotate_logfile()" ],
	[ "pg_terminate_backend(pid)\tServer Signalling"			, "pg_terminate_backend(${1:pid})" ],
	
	// Backup Contorl Functions
	[ "pg_create_restore_point(name)\tBackup Control"			, "pg_create_restore_point(${1:name})" ],
	[ "pg_current_xlog_insert_location()\tBackup Control"		, "pg_current_xlog_insert_location()" ],
	[ "pg_current_xlog_location()\tBackup Control"				, "pg_current_xlog_location()" ],
	[ "pg_start_backup(label)\tBackup Control"					, "pg_start_backup(${1:label})" ],
	[ "pg_start_backup(label, fast)\tBackup Control"			, "pg_start_backup(${1:label}, ${2:fast})" ],
	[ "pg_stop_backup()\tBackup Control"						, "pg_stop_backup()" ],
	[ "pg_switch_xlog()\tBackup Control"						, "pg_switch_xlog()" ],
	[ "pg_xlogfile_name(location)\tBackup Control"				, "pg_xlogfile_name(${1:location})" ],
	[ "pg_xlogfile_name_offset(location)\tBackup Control"		, "pg_xlogfile_name_offset(${1:location})" ],
	[ "pg_xlogfile_name_diff(location, location)\tBackup Control", "pg_xlogfile_name_diff(${1:location}, ${2:location})" ],
	
	// Recovery Control Functions
	[ "pg_is_in_recovery()\tRecovery Control"					, "pg_is_in_recovery()" ],
	[ "pg_last_xlog_receive_location()\tRecovery Control"		, "pg_last_xlog_receive_location()" ],
	[ "pg_last_xlog_replay_location()\tRecovery Control"		, "pg_last_xlog_replay_location()" ],
	[ "pg_last_xact_replay_timestamp()\tRecovery Control"		, "pg_last_xact_replay_timestamp()" ],
	[ "pg_is_xlog_replay_paused()\tRecovery Control"			, "pg_is_xlog_replay_paused()" ],
	[ "pg_xlog_replay_pause()\tRecovery Control"				, "pg_xlog_replay_pause()" ],
	[ "pg_xlog_replay_resume()\tRecovery Control"				, "pg_xlog_replay_resume()" ],
	
	// Snapshot Synchronization Functions
	[ "pg_export_snapshot()\tSnapshot Synchronization"			, "pg_export_snapshot()" ],
	
	// Database Object Management Functions
	[ "pg_column_size(value)\tDatabase Object"					, "pg_column_size(${1:value})" ],
	[ "pg_database_size(oid)\tDatabase Object"					, "pg_database_size(${1:oid})" ],
	[ "pg_database_size(name)\tDatabase Object"					, "pg_database_size(${1:name})" ],
	[ "pg_indexes_size(index)\tDatabase Object"					, "pg_indexes_size(${1:index})" ],
	[ "pg_relation_size(name)\tDatabase Object"					, "pg_relation_size(${1:name})" ],
	[ "pg_relation_size(name, fork)\tDatabase Object"			, "pg_relation_size(${1:name}, ${2:fork})" ],
	[ "pg_size_pretty(bytes)\tDatabase Object"					, "pg_size_pretty(${1:bytes})" ],
	[ "pg_table_size(name)\tDatabase Object"					, "pg_table_size(${1:name})" ],
	[ "pg_tablespace_size(oid)\tDatabase Object"				, "pg_tablespace_size(${1:oid})" ],
	[ "pg_tablespace_size(name)\tDatabase Object"				, "pg_tablespace_size(${1:name})" ],
	[ "pg_total_relation_size(name)\tDatabase Object"			, "pg_total_relation_size(${1:name})" ],
	
	// Database Object Location Functions
	[ "pg_relation_filenode(name)\tDatabase Object"				, "pg_relation_filenode(${1:name})" ],
	[ "pg_relation_filepath(name)\tDatabase Object"				, "pg_relation_filepath(${1:name})" ],
	
	// Generic File Access Functions
	[ "pg_ls_dir(dirname)\tFile Access"							, "pg_ls_dir(${1:dirname})" ],
	[ "pg_read_file(filename)\tFile Access"						, "pg_read_file(${1:filename})" ],
	[ "pg_read_file(filename, offset, length)\tFile Access"		, "pg_read_file(${1:filename}, ${2:offset}, ${3:length})" ],
	[ "pg_read_binary_file(filename)\tFile Access"				, "pg_read_binary_file(${1:filename})" ],
	[ "pg_read_binary_file(filename, offset, length)\tFile Access", "pg_read_binary_file(${1:filename}, ${2:offset}, ${3:length})" ],
	[ "pg_stat_file(filename)\tFile Access"						, "pg_stat_file(${1:filename})" ],
	
	// Advisory Lock Functions
	[ "pg_advisory_lock(key)\tAdvisory Lock"					, "pg_advisory_lock(${1:key})" ],
	[ "pg_advisory_lock(key1, key2)\tAdvisory Lock"				, "pg_advisory_lock(${1:key1}, ${2:key2})" ],
	[ "pg_advisory_lock_shared(key)\tAdvisory Lock"				, "pg_advisory_lock_shared(${1:key})" ],
	[ "pg_advisory_lock_shared(key1, key2)\tAdvisory Lock"		, "pg_advisory_lock_shared(${1:key1}, ${2:key2})" ],
	[ "pg_advisory_unlock(key)\tAdvisory Lock"					, "pg_advisory_unlock(${1:key})" ],
	[ "pg_advisory_unlock(key1, key2)\tAdvisory Lock"			, "pg_advisory_unlock(${1:key1}, ${2:key2})" ],
	[ "pg_advisory_unlock_all()\tAdvisory Lock"					, "pg_advisory_unlock_all()" ],
	[ "pg_advisory_unlock_shared(key)\tAdvisory Lock"			, "pg_advisory_unlock_shared(${1:key})" ],
	[ "pg_advisory_unlock_shared(key1, key2)\tAdvisory Lock"	, "pg_advisory_unlock_shared(${1:key1}, ${2:key2})" ],
	[ "pg_advisory_xact_lock(key)\tAdvisory Lock"				, "pg_advisory_xact_lock(${1:key})" ],
	[ "pg_advisory_xact_lock(key1, key2)\tAdvisory Lock"		, "pg_advisory_xact_lock(${1:key1}, ${2:key2})" ],
	[ "pg_advisory_xact_lock_shared(key)\tAdvisory Lock"		, "pg_advisory_xact_lock_shared(${1:key})" ],
	[ "pg_advisory_xact_lock_shared(key1, key2)\tAdvisory Lock"	, "pg_advisory_xact_lock_shared(${1:key1}, ${2:key2})" ],
	[ "pg_try_advisory_lock(key)\tAdvisory Lock"				, "pg_try_advisory_lock(${1:key})" ],
	[ "pg_try_advisory_lock(key1, key2)\tAdvisory Lock"			, "pg_try_advisory_lock(${1:key1}, ${2:key2})" ],
	[ "pg_try_advisory_lock_shared(key)\tAdvisory Lock"			, "pg_try_advisory_lock_shared(${1:key})" ],
	[ "pg_try_advisory_lock_shared(key1, key2)\tAdvisory Lock"	, "pg_try_advisory_lock_shared(${1:key1}, ${2:key2})" ],
	[ "pg_try_advisory_xact_lock(key)\tAdvisory Lock"			, "pg_try_advisory_xact_lock(${1:key})" ],
	[ "pg_try_advisory_xact_lock(key1, key2)\tAdvisory Lock"	, "pg_try_advisory_xact_lock(${1:key1}, ${2:key2})" ],
	[ "pg_try_advisory_xact_lock_shared(key)\tAdvisory Lock"	, "pg_try_advisory_xact_lock_shared(${1:key})" ],
	[ "pg_try_advisory_xact_lock_shared(key1, key2)\tAdvisory Lock", "pg_try_advisory_xact_lock_shared(${1:key1}, ${2:key2})" ]

  ]
}
